#!/usr/bin/env perl
use strict;
use warnings;

use Mojolicious::Lite;
use Net::Telnet;

use constant TABLE_SEP =>
    "-----+------------------+---------+------------+------------------+---------+\n";
use constant NPS_HOST => 'nps';
use constant NPS_PROMPT => '/NPS> $/';
use constant MAX_TRIES => 3;
use constant DISABLE => ( 1 );

use Data::Dumper;

# “We’ve lost power of the forward Gameboy! Mario not responding!”


my %action_map =
(
    'on' => 'on',
    'off' => 'off',
);

my $telnet = Net::Telnet->new(Prompt => NPS_PROMPT);
$telnet->open(NPS_HOST);
$telnet->waitfor(NPS_PROMPT);

$SIG{INT} = sub { $telnet->cmd('/x') };

get '/' => sub
{
    my $self = shift;
    $self->render( _status() );
} => 'index';

get '/:action/:plug' => sub
{
    my $self = shift;
    my $plug = $self->stash('plug');
    my $action = $self->stash('action');

    _action($action, $plug);

    $self->redirect_to('index');

} => 'action';


# Static file delivery

get '/static/(*path)' => sub
{
    app->static;
} => 'static';


# --- 

sub _action
{
    my $q = shift;
    my $plug = shift;
    
    my $action = $action_map{ $q } or die "invalid action: $q";
    $plug =~ s/[^0-9]//; # simple input sanitization

    for (DISABLE) { die 'plug disabled' if  $_ == $plug };

    return _nps('/' . $action . ' '. $plug);
}

sub _status
{
    my @status_raw = _nps('/s') or die "could not read status: $!";
    my @plugs;

    # remove until TABLE_SEP;
    while (my $l = shift @status_raw)
    {
        last if $l eq TABLE_SEP
    }

    LINE: for my $line (@status_raw)
    {

        # were done if TABLE_SEP is reached
        app->log->debug($line);
        last if $line eq TABLE_SEP;

        $line =~ s/^\s*//;
        my ($num, $name, $status, $delay, $password, $default) 
            = split /\s*\|\s*/, $line;

        for (DISABLE) { app->log->debug("is $_ == $num?"); next LINE if $_ == $num }

        push @plugs,
        {
            num => $num,
            name => $name,
            status => $status,
            delay => $delay,
            password => $password,
            default => $default
        };
    }
    return(plugs => \@plugs);
}

sub _nps
{
    my $command = shift;

    my $reopend;
    my $tries;
    do
    {
        my @ret = $telnet->cmd($command);
        app->log->debug("CMD>$command<DMC PROMPT: " . $telnet->last_prompt . "\n\n\n". Dumper(@ret));
        return @ret if @ret;

        if ($telnet->errmsg)
        {
            $telnet->open(NPS_HOST);
            next unless $reopend;
            $reopend = 1;
        }
        sleep 1;
    } while $tries++ < MAX_TRIES;

    die 'could not send cmd to telnetd';
}


app->start;

__DATA__

@@ index.html.ep
% layout 'default';
<%= include "plugs" %>


@@ plugs.html.ep
    <div id="collection" class="draggable">
        <h1>Plugs</h1>
        <table>
            <tr><th>Plug</th><th>Name</th><th>Status</th><th>Action</th></tr>
% for my $plug (@$plugs) {
            <tr>
                <td><%= $plug->{num} %></td><td><%= $plug->{name} %></td>
                <td><%= $plug->{status} %></td>
                <td>
                    <a href="<%= url_for('action', action => 'on', plug => $plug->{num}) %>">on</a>
                    <a href="<%= url_for('action', action => 'off', plug => $plug->{num}) %>">off</a>
                </td>
            </tr>
% }
        </table>
    </div>

@@ layouts/default.html.ep
<!doctype html>
<head>
 <meta charset="utf-8">
 <title>powerlicious</title>
 <style type="text/css">
<!--
    a { color: white; }
    a:hover { color: DeepPink; }
    html { background-color: black; color: white; }

    h1,h2 { color: gold; }
-->
 </style>
<body>
    <%== content %>
    <br />
    <pre><div id="debug"></div></pre>
</body>
</html>



@@ exception.html.ep
<!doctype html>
<html>
    <head><title>Error</title></head>
    <body><h2>Error</h2></body>
</html>

