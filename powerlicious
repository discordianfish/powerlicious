#!/usr/bin/env perl
use strict;
use warnings;

use Mojolicious::Lite;
use Net::Telnet;

use constant TABLE_SEP =>
    "-----+------------------+---------+------------+------------------+---------+\n";
use constant NPS_HOST => 'nps';
use constant NPS_PROMPT => '/NPS> $/';
use constant MAX_TRIES => 10;
use constant DISABLE => ( 1 );
use constant PRESET => 
{
    'Swag' =>  [ 3, 4, 5, 7, 8 ],
    'Party' => [ 3, 4, 5, 8 ],
    'Cozy' => [ 7 ],
    'Stoned' => [ 4, 5 ],
    'too stoned' => [ 4 ],
    'all off' => [ ],
};
use constant NUM_PLUGS => 8;

use Data::Dumper;

# “We’ve lost power of the forward Gameboy! Mario not responding!”


my %action_map =
(
    'on' => 'on',
    'off' => 'off',

);

my $telnet = Net::Telnet->new(Prompt => NPS_PROMPT, Errmode => 'die');
my $open;

$SIG{INT} = sub { $telnet->cmd('/x'); exit };
$SIG{PIPE} = sub { die "broken pipe: $!" };

get '/' => sub
{
    my $self = shift;
    $self->render( _status(), preset => PRESET);
} => 'index';

get '/preset/:name' => sub
{
    my $self = shift;

    my $list = (PRESET)->{$self->stash('name')}
        or die 'invalid preset';

    my %status = _status();
    for my $plug (@{ $status{plugs} })
    {
        app->log->debug($plug->{num});
        if (grep { $plug->{num} eq $_ } @$list)
        {
            app->log->debug($plug->{num} . ' should be turned on');
            
            _nps('/on ' . $plug->{num})
                if $plug->{status} eq 'OFF';
        } else
        {
            app->log->debug($plug->{num} . ' should be turned off');
            _nps('/off ' . $plug->{num})
                if $plug->{status} eq 'ON';
        }
    }
    
    $self->redirect_to('index');

} => 'preset';


get '/:action/:plug' => sub
{
    my $self = shift;
    my $plug = $self->stash('plug');
    my $q = $self->stash('action');

    my $action = $action_map{ $q } or die "invalid action: $q";
    $plug =~ s/[^0-9]//; # simple input sanitization

    for (DISABLE) { die 'plug disabled' if  $_ == $plug };

    _nps('/' . $action . ' '. $plug);

    $self->redirect_to('index');

} => 'action';

# Static file delivery

get '/static/(*path)' => sub
{
    app->static;
} => 'static';


# --- 

sub _status
{
    my @status_raw = _nps('/s') or die "could not read status: $!";
    my @plugs;

    # remove until TABLE_SEP;
    while (my $l = shift @status_raw)
    {
        last if $l eq TABLE_SEP
    }

    LINE: for my $line (@status_raw)
    {

        # were done if TABLE_SEP is reached
        app->log->debug($line);
        last if $line eq TABLE_SEP;

        $line =~ s/^\s*//;
        my ($num, $name, $status, $delay, $password, $default) 
            = split /\s*\|\s*/, $line;

        for (DISABLE) { app->log->debug("is $_ == $num?"); next LINE if $_ == $num }

        push @plugs,
        {
            num => $num,
            name => $name,
            status => $status,
            delay => $delay,
            password => $password,
            default => $default
        };
    }
    return(plugs => \@plugs);
}

sub _nps
{
    my $command = shift;

    my $tries;
    while ($tries++ < MAX_TRIES)
    {
        unless ($open)
        {
            app->log->debug('connection closed, reopening');
            eval {
                $telnet->open(NPS_HOST);
                $telnet->waitfor(NPS_PROMPT);
            };
            if ($@)
            {
                app->log->warn("could not reopen connection: $@");
                next; # immediately retry
            }
            $open = 1;
        }

        my @ret = eval { $telnet->cmd($command) };
        unless ($@)
        {
            app->log->debug("$tries: -- $command --: " . $telnet->last_prompt . "\n". Dumper(@ret));
            return @ret if @ret;
        }

        app->log->warn("could not send command($command): $@");
        $telnet->close;
        undef $open;
        sleep 1;
    }
    die 'could not send cmd to telnetd';
}


app->start;

__DATA__

@@ index.html.ep
% layout 'default';
<%= include 'plugs' %>
<%= include 'presets' %>


@@ plugs.html.ep
<div id="plugs">
    <h1>Plugs</h1>
%   for my $plug (@$plugs) {
%       if ($plug->{status} eq 'ON') {
            <a class='on' href="<%= url_for('action', action => 'off', plug => $plug->{num}) %>">
%       } else {
            <a class='off' href="<%= url_for('action', action => 'on', plug => $plug->{num}) %>">
%       }       
        <span><%= $plug->{num} %>. <%= $plug->{name} %></span>
        </a>
%   }
</div>

@@ presets.html.ep
<div id='presets'>
    <h1>Presets</h1>
%   for my $preset (keys %$preset) {
        <a href="<%= url_for 'preset', name => $preset %>"><span><%= $preset %></span></a>
%   }
</div>

@@ layouts/default.html.ep
<!doctype html>
<head>
 <meta charset="utf-8">
 <title>powerlicious</title>
 <style type="text/css">
<!--
    a { text-decoration: none; color: #ddd }
    a.on { color: #eee }
    a.off { color: #555 }
    a:hover { color: white }
    html
    {
        background-color: black;
        color: white;
        font-size: 200%;

    }
    #content { width: 20em; padding-left: 1em }
    h1,h2 { color: gold }
    span { display: block }
    span:hover { background-color: #555 }


-->
 </style>
<body>
    <div id="content"><%== content %></div>
</body>
</html>



@@ exception.html.ep
<!doctype html>
<html>
    <head><title>Error</title></head>
    <body><h2>Error</h2></body>
</html>
